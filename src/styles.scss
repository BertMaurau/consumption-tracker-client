@use '~@angular/material' as mat;
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$consumption-tracker-primary: mat.define-palette(mat.$indigo-palette);
$consumption-tracker-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$consumption-tracker-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$consumption-tracker-theme: mat.define-light-theme(
  (
    color: (
      primary: $consumption-tracker-primary,
      accent: $consumption-tracker-accent,
      warn: $consumption-tracker-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($consumption-tracker-theme);

/* You can add global styles to this file, and also import other style files */

.separator {
  border-top: 1px solid #cbd2d6;
  position: relative;
  margin: 25px 0 5px;
  text-align: center;

  span {
    background-color: #fff;
    padding: 0 0.5em;
    position: relative;
    color: #6c7378;
    top: -0.8em;
  }
}

.notification {
  padding: 0.72rem !important;
}

.listmenu-item {
  justify-content: flex-start;
  border-bottom: 1px solid lightgrey !important;
  margin-bottom: 12px;
  padding: 24px;

  .icon {
    margin-right: 12px;
    font-size: 1.4em;
  }
}

.avatar {
  border-radius: 50%;
  border: 1px solid lightgrey;
}

.force-hidden {
  display: none !important;
  height: 1px;
  width: 1px;
}
.custom-dialog {

  @media screen and (max-width: 768px) {
    max-width: 100vw !important;
    min-width: 100vw !important;
    height: 100vh;
  }

  .dialog-header {
    h1 {
      margin-bottom: 0px;
    }
  }
  .dialog-content {
    width: 100%;
    max-width: 512px;
    margin: 0px !important;
    padding: 0px !important;
    height: 100%;

    @media screen and (max-width: 768px) {
      max-height: calc(100vh - 88px) !important;
    }
  }
  .dialog-actions {
    width: 100%;
  }
}

.fab-button {
  position: fixed;
  bottom: 24px;
  right: 24px;
  padding: 12px;
  border-radius: 50%;
  width:64px;
  height: 64px;
  box-shadow: 0 0.5em 1em -0.125em rgb(10 10 10 / 10%), 0 0 0 1px rgb(10 10 10 / 2%);

  &:hover {
    transform: scale(1.1);
  }

  
}

/* Margin/Padding/.. helper classes */
$marginKey: "m";
$paddingKey: "p";
$spacer: 1;
$sizeUnit: rem;
$separator: "-";
$sizes: (
  ("0", 0),
  ("auto", auto),
  ("1", $spacer * 0.25),
  ("2", $spacer * 0.5),
  ("3", $spacer),
  ("4", $spacer * 1.5),
  ("5", $spacer * 3)
);
$positions: (("t", "top"), ("r", "right"), ("b", "bottom"), ("l", "left"), ("x", "x"), ("y", "y"));

@function sizeValue($key, $value) {
  @if ($key == "0") {
    @return 0;
  } @else if ($key == "auto") {
    @return auto;
  } @else {
    @return $value + $sizeUnit;
  }
}

@each $size in $sizes {
  $sizeKey: nth($size, 1);
  $sizeValue: nth($size, 2);
  .#{$marginKey}#{$separator}#{$sizeKey} {
    margin: sizeValue($sizeKey, $sizeValue);
  }
  .#{$paddingKey}#{$separator}#{$sizeKey} {
    padding: sizeValue($sizeKey, $sizeValue);
  }
  @each $position in $positions {
    $posKey: nth($position, 1);
    $posValue: nth($position, 2);
    .#{$marginKey}#{$posKey}#{$separator}#{$sizeKey} {
      @if $posValue == "x" {
        margin-left: sizeValue($sizeKey, $sizeValue) !important;
        margin-right: sizeValue($sizeKey, $sizeValue) !important;
      } @else if $posValue == "y" {
        margin-top: sizeValue($sizeKey, $sizeValue) !important;
        margin-bottom: sizeValue($sizeKey, $sizeValue) !important;
      } @else {
        margin-#{$posValue}: sizeValue($sizeKey, $sizeValue) !important;
      }
    }
    .#{$paddingKey}#{$posKey}#{$separator}#{$sizeKey} {
      @if $posValue == "x" {
        padding-left: sizeValue($sizeKey, $sizeValue) !important;
        padding-right: sizeValue($sizeKey, $sizeValue) !important;
      } @else if $posValue == "y" {
        padding-top: sizeValue($sizeKey, $sizeValue) !important;
        padding-bottom: sizeValue($sizeKey, $sizeValue) !important;
      } @else {
        padding-#{$posValue}: sizeValue($sizeKey, $sizeValue) !important;
      }
    }
  }
}
html,
body {
  height: 100%;
}
body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}
